#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
require('dotenv').config()
var debug = require('debug')('backmvc:server');
var https = require('https')
var mongoose = require('mongoose')
mongoose.connect('mongodb+srv://bsq:bsq@cluster0.jtz4d.mongodb.net/db?retryWrites=true&w=majority', { useNewUrlParser: true, useUnifiedTopology: true })
var db = mongoose.connection
db.on('error', console.error.bind(console, 'MongoDB connection failure: '))
db.on('open', console.log.bind(console, 'Conectado ao banco com sucesso.'))
var fs = require('fs')
var privateKey = fs.readFileSync(process.env.SSL_KEY_FILE, 'utf8').toString()
var certificate = fs.readFileSync(process.env.SSL_CRT_FILE, 'utf8').toString()
var credentials = {key: privateKey, cert: certificate}


/**
 * Get port from env ironment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3333');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer(credentials, app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`server rodando na porta ${port}`)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
